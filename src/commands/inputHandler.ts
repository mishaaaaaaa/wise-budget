// src/commands/inputHandler.ts
import { Telegraf } from "telegraf";
import fetch from "node-fetch";
import { xataClient } from "../xataClient.js";
import { MonobankClientInfo } from "../types.js";

export const inputHandler = (bot: Telegraf) => {
  bot.on("text", async (ctx) => {
    const userId = ctx.from.id;
    const client = xataClient();
    const user = await client.getUserByTelegramId(userId);

    // Check if user is in account selection mode
    if (user && user.awaiting_account_selection === true) {
      // Handle account selection logic
      try {
        const userInput = ctx.message.text.trim();
        console.log(`User selected account: "${userInput}"`);

        // Parse the input as a number (1-based index)
        const selectedNumber = parseInt(userInput, 10);

        if (isNaN(selectedNumber)) {
          await ctx.reply("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–∞—Ö—É–Ω–∫—É.");
          return;
        }

        // Convert to 0-based index for array
        const selectedIndex = selectedNumber - 1;
        console.log(`Parsed index: ${selectedIndex}`);

        // Get accounts info again to validate the selection
        const response = await fetch(
          "https://api.monobank.ua/personal/client-info",
          {
            headers: { "X-Token": user.monobank_token || "" },
          }
        );

        if (!response.ok) {
          throw new Error("Failed to get accounts");
        }

        const data = (await response.json()) as MonobankClientInfo;
        console.log(`Total accounts available: ${data.accounts.length}`);

        // Validate selection is within range
        if (selectedIndex < 0 || selectedIndex >= data.accounts.length) {
          await ctx.reply(
            `‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É. –û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥ 1 –¥–æ ${data.accounts.length}.`
          );
          return;
        }

        const selectedAccount = data.accounts[selectedIndex];

        if (!selectedAccount) {
          await ctx.reply(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫.`);
          return;
        }

        console.log(`Selected account ID: ${selectedAccount.id}`);
        console.log(
          `Selected account currency: ${selectedAccount.currencyCode}`
        );
        console.log(`Selected account balance: ${selectedAccount.balance}`);

        // TypeScript safety - make sure selectedAccount exists
        if (!selectedAccount) {
          await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.");
          return;
        }

        // Update the user's main account ID
        await client.updateUserAccountSelection({
          telegramId: userId,
          mainAccountId: selectedAccount.id,
          awaitingSelection: false,
        });

        // Confirm selection
        const balance = (selectedAccount.balance / 100).toFixed(2);
        const currency =
          selectedAccount.currencyCode === 980
            ? "–≥—Ä–Ω"
            : `–∫–æ–¥ –≤–∞–ª—é—Ç–∏ ${selectedAccount.currencyCode}`;
        const cardInfo =
          selectedAccount.maskedPan && selectedAccount.maskedPan.length > 0
            ? ` (${selectedAccount.maskedPan[0]})`
            : "";

        await ctx.reply(
          `‚úÖ –†–∞—Ö—É–Ω–æ–∫ #${selectedNumber} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π!\n` +
            `üí≥ –ë–∞–ª–∞–Ω—Å: ${balance} ${currency}${cardInfo}\n\n` +
            `–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º –±—é–¥–∂–µ—Ç–æ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥:\n` +
            `/me - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–∞—Ö—É–Ω–∫–∏`
        );
      } catch (error) {
        console.error("Account selection error:", error);
        await ctx.reply(
          "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /connect –¥–ª—è –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è."
        );
      }
      return;
    }

    // Original token processing code
    const token = ctx.message.text.trim();

    try {
      const response = await fetch(
        "https://api.monobank.ua/personal/client-info",
        {
          headers: { "X-Token": token },
        }
      );

      if (!response.ok) throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω");

      const data = (await response.json()) as MonobankClientInfo;
      const name = data.name || "–ö–ª—ñ—î–Ω—Ç";

      await ctx.reply(`‚úÖ –í—ñ—Ç–∞—é, ${name}! –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π.`);

      // Using the new XataClient wrapper with proper type handling
      await client.saveOrUpdateUser({
        telegramId: ctx.from.id,
        username: ctx.from.username || "",
        firstName: ctx.from.first_name || "",
        lastName: ctx.from.last_name || "",
        languageCode: ctx.from.language_code || "",
        isPremium: ctx.from.is_premium === true,
        monobankToken: token,
        monobankName: name,
        awaitingAccountSelection: true, // Set flag for account selection mode
      });

      // Show accounts for selection
      if (data.accounts && data.accounts.length > 0) {
        const accountsList = data.accounts
          .map((acc, index) => {
            const balance = (acc.balance / 100).toFixed(2);
            const currency =
              acc.currencyCode === 980
                ? "–≥—Ä–Ω"
                : `–∫–æ–¥ –≤–∞–ª—é—Ç–∏ ${acc.currencyCode}`;
            const cardInfo =
              acc.maskedPan && acc.maskedPan.length > 0
                ? ` (${acc.maskedPan[0]})`
                : "";
            return `${index + 1}. –ë–∞–ª–∞–Ω—Å: ${balance} ${currency}${cardInfo}`;
          })
          .join("\n");

        await ctx.reply(
          `–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –π–æ–≥–æ –Ω–æ–º–µ—Ä:\n\n${accountsList}\n\n` +
            `–î–ª—è –≤–∏–±–æ—Ä—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É (1-${data.accounts.length})`
        );
      } else {
        await ctx.reply("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É —É –≤–∞—à–æ–º—É Monobank.");
      }
    } catch (error) {
      console.error(error);
      await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–±–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.");
    }
  });
};
