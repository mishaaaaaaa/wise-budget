import dotenv from "dotenv";
import express from "express";
import { Telegraf } from "telegraf";
import bodyParser from "body-parser";
import fetch from "node-fetch"; // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å node-fetch
import { supabase } from "./supabase.js";

dotenv.config();

// üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
const botToken = process.env["BOT_TOKEN"];
if (!botToken) throw new Error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!");

const bot = new Telegraf(botToken);

// üìå –ö–æ–º–∞–Ω–¥–∞ /start
bot.start((ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –±—é–¥–∂–µ—Ç—É Monobank. –í–≤–µ–¥–∏ /connect, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏."
  );
});

// üìå –ö–æ–º–∞–Ω–¥–∞ /connect
bot.command("connect", async (ctx) => {
  await ctx.reply(
    "–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π —Ç–æ–∫–µ–Ω Monobank: https://api.monobank.ua/"
  );
});

bot.command("me", async (ctx) => {
  const userId = ctx.from.id;

  const { data: user, error } = await supabase
    .from("users")
    .select("monobank_token, monobank_name")
    .eq("telegram_id", userId)
    .single();

  if (error || !user) {
    console.error("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    return ctx.reply("‚ùó –°–ø–µ—Ä—à—É –ø—ñ–¥–∫–ª—é—á–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /connect");
  }

  const token = user.monobank_token;

  try {
    const response = await fetch(
      "https://api.monobank.ua/personal/client-info",
      {
        headers: {
          "X-Token": token,
        },
      }
    );

    if (!response.ok) {
      return ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.");
    }

    const data: any = await response.json();

    console.log(data);

    const name = data.name || user.monobank_name || "–ö–ª—ñ—î–Ω—Ç";
    const info = data.accounts
      .map((acc: any) => {
        const balance = (acc.balance / 100).toFixed(2);
        const currency = acc.currencyCode;
        return `‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${balance} (–≤–∞–ª—é—Ç–∞ ${currency})`;
      })
      .join("\n");

    return ctx.reply(`üë§ –Ü–º‚Äô—è: ${name}\n${info}`);
  } catch (err) {
    console.error(err);
    return ctx.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.");
  }
});

bot.on("text", async (ctx) => {
  const token = ctx.message.text.trim();

  try {
    const response = await fetch(
      "https://api.monobank.ua/personal/client-info",
      {
        headers: { "X-Token": token },
      }
    );

    if (!response.ok) throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω");

    const data: any = await response.json();
    const name = data.name || "–ö–ª—ñ—î–Ω—Ç";

    await ctx.reply(`‚úÖ –í—ñ—Ç–∞—é, ${name}! –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π.`);

    // üì¶ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Supabase
    const { error } = await supabase.from("users").upsert(
      [
        {
          telegram_id: ctx.from.id,
          username: ctx.from.username,
          first_name: ctx.from.first_name,
          language_code: ctx.from.language_code,
          is_premium: ctx.from.is_premium ?? false,
          monobank_token: token,
          monobank_name: name,
          updated_at: new Date().toISOString(),
        },
      ],
      {
        onConflict: "telegram_id", // –æ–±–Ω–æ–≤–ª—è–µ—Ç, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å
      }
    );

    if (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    }
  } catch (error) {
    console.error(error);
    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–±–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.");
  }
});

const app = express();
app.use(bodyParser.json());

app.get("/", (_, res) => res.send("‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!"));

const PORT = process.env["PORT"] || 3000;

app.listen(PORT, () => {
  console.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:${PORT}`);
});

// ü§ñ –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º Telegram –±–æ—Ç–∞
bot
  .launch()
  .then(() => {
    console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!");
  })
  .catch((err) => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:", err);
  });
