import dotenv from "dotenv";
import express from "express";
import { Telegraf } from "telegraf";
import bodyParser from "body-parser";
import fetch from "node-fetch";
import { xataClient } from "./xataClient.js";
import { MonobankClientInfo } from "./types.js";
import { commands } from "./commands.js";

// ‚úÖ XataClient wrapper implemented

dotenv.config();

const botToken = process.env["BOT_TOKEN"];
if (!botToken) throw new Error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!");

const bot = new Telegraf(botToken);

// üìå /start
bot.start((ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –±—é–¥–∂–µ—Ç—É Monobank. –í–≤–µ–¥–∏ /connect, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏."
  );
});

// üìå /connect
bot.command("connect", async (ctx) => {
  await ctx.reply(
    "–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π —Ç–æ–∫–µ–Ω Monobank: https://api.monobank.ua/"
  );
});

// üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–∫–µ–Ω –∏–ª–∏ –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞)
bot.on("text", async (ctx) => {
  const userId = ctx.from.id;
  const client = xataClient();
  const user = await client.getUserByTelegramId(userId);

  // Check if user is in account selection mode
  if (user && user.awaiting_account_selection === true) {
    // Handle account selection logic
    try {
      const userInput = ctx.message.text.trim();
      console.log(`User selected account: "${userInput}"`);

      // Parse the input as a number (1-based index)
      const selectedNumber = parseInt(userInput, 10);

      if (isNaN(selectedNumber)) {
        await ctx.reply("‚ùå –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–∞—Ö—É–Ω–∫—É.");
        return;
      }

      // Convert to 0-based index for array
      const selectedIndex = selectedNumber - 1;
      console.log(`Parsed index: ${selectedIndex}`);

      // Get accounts info again to validate the selection
      const response = await fetch(
        "https://api.monobank.ua/personal/client-info",
        {
          headers: { "X-Token": user.monobank_token || "" },
        }
      );

      if (!response.ok) {
        throw new Error("Failed to get accounts");
      }

      const data = (await response.json()) as MonobankClientInfo;
      console.log(`Total accounts available: ${data.accounts.length}`);

      // Validate selection is within range
      if (selectedIndex < 0 || selectedIndex >= data.accounts.length) {
        await ctx.reply(
          `‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É. –û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤—ñ–¥ 1 –¥–æ ${data.accounts.length}.`
        );
        return;
      }

      const selectedAccount = data.accounts[selectedIndex];

      if (!selectedAccount) {
        await ctx.reply(`‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫.`);
        return;
      }

      console.log(`Selected account ID: ${selectedAccount.id}`);
      console.log(`Selected account currency: ${selectedAccount.currencyCode}`);
      console.log(`Selected account balance: ${selectedAccount.balance}`);

      // TypeScript safety - make sure selectedAccount exists
      if (!selectedAccount) {
        await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.");
        return;
      }

      // Update the user's main account ID
      await client.updateUserAccountSelection({
        telegramId: userId,
        mainAccountId: selectedAccount.id,
        awaitingSelection: false,
      });

      // Confirm selection
      const balance = (selectedAccount.balance / 100).toFixed(2);
      const currency =
        selectedAccount.currencyCode === 980
          ? "–≥—Ä–Ω"
          : `–∫–æ–¥ –≤–∞–ª—é—Ç–∏ ${selectedAccount.currencyCode}`;
      const cardInfo =
        selectedAccount.maskedPan && selectedAccount.maskedPan.length > 0
          ? ` (${selectedAccount.maskedPan[0]})`
          : "";

      await ctx.reply(
        `‚úÖ –†–∞—Ö—É–Ω–æ–∫ #${selectedNumber} —É—Å–ø—ñ—à–Ω–æ –æ–±—Ä–∞–Ω–æ —è–∫ –æ—Å–Ω–æ–≤–Ω–∏–π!\n` +
          `üí≥ –ë–∞–ª–∞–Ω—Å: ${balance} ${currency}${cardInfo}\n\n` +
          `–¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ –∫–µ—Ä—É–≤–∞—Ç–∏ —Å–≤–æ—ó–º –±—é–¥–∂–µ—Ç–æ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥:\n` +
          `/me - –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–∞—Ö—É–Ω–∫–∏`
      );
    } catch (error) {
      console.error("Account selection error:", error);
      await ctx.reply(
        "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–±–æ—Ä—ñ —Ä–∞—Ö—É–Ω–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ –≤–≤–µ–¥—ñ—Ç—å /connect –¥–ª—è –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è."
      );
    }
    return;
  }

  // Original token processing code
  const token = ctx.message.text.trim();

  try {
    const response = await fetch(
      "https://api.monobank.ua/personal/client-info",
      {
        headers: { "X-Token": token },
      }
    );

    if (!response.ok) throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω");

    const data = (await response.json()) as MonobankClientInfo;
    const name = data.name || "–ö–ª—ñ—î–Ω—Ç";

    await ctx.reply(`‚úÖ –í—ñ—Ç–∞—é, ${name}! –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π.`);

    // Using the new XataClient wrapper with proper type handling
    await client.saveOrUpdateUser({
      telegramId: ctx.from.id,
      username: ctx.from.username || "",
      firstName: ctx.from.first_name || "",
      lastName: ctx.from.last_name || "",
      languageCode: ctx.from.language_code || "",
      isPremium: ctx.from.is_premium === true,
      monobankToken: token,
      monobankName: name,
      awaitingAccountSelection: true, // Set flag for account selection mode
    });

    // Show accounts for selection
    if (data.accounts && data.accounts.length > 0) {
      const accountsList = data.accounts
        .map((acc, index) => {
          const balance = (acc.balance / 100).toFixed(2);
          const currency =
            acc.currencyCode === 980 ? "–≥—Ä–Ω" : `–∫–æ–¥ –≤–∞–ª—é—Ç–∏ ${acc.currencyCode}`;
          const cardInfo =
            acc.maskedPan && acc.maskedPan.length > 0
              ? ` (${acc.maskedPan[0]})`
              : "";
          return `${index + 1}. –ë–∞–ª–∞–Ω—Å: ${balance} ${currency}${cardInfo}`;
        })
        .join("\n");

      await ctx.reply(
        `–û–±–µ—Ä—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫, –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –π–æ–≥–æ –Ω–æ–º–µ—Ä:\n\n${accountsList}\n\n` +
          `–î–ª—è –≤–∏–±–æ—Ä—É –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É (1-${data.accounts.length})`
      );
    } else {
      await ctx.reply("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É —É –≤–∞—à–æ–º—É Monobank.");
    }
  } catch (error) {
    console.error(error);
    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–±–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.");
  }
});

// üìå /me ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ Monobank
bot.command("me", async (ctx) => {
  const userId = ctx.from.id;
  const client = xataClient();

  const user = await client.getUserByTelegramId(userId);

  if (!user) {
    return ctx.reply("‚ùó –°–ø–µ—Ä—à—É –ø—ñ–¥–∫–ª—é—á–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /connect");
  }

  const token = user.monobank_token;

  try {
    const response = await fetch(
      "https://api.monobank.ua/personal/client-info",
      {
        headers: { "X-Token": token },
      }
    );

    if (!response.ok) {
      return ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.");
    }

    const data = (await response.json()) as MonobankClientInfo;
    const name = data.name || user.monobank_name || "–ö–ª—ñ—î–Ω—Ç";

    // Check if the user has a main account selected
    let mainAccountInfo = "";
    if (user.main_account_id) {
      const mainAccount = data.accounts.find(
        (acc) => acc.id === user.main_account_id
      );
      if (mainAccount) {
        const balance = (mainAccount.balance / 100).toFixed(2);
        const currency =
          mainAccount.currencyCode === 980
            ? "–≥—Ä–Ω"
            : `–∫–æ–¥ –≤–∞–ª—é—Ç–∏ ${mainAccount.currencyCode}`;
        mainAccountInfo = `\nüí∞ –û—Å–Ω–æ–≤–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: ${balance} ${currency}`;

        if (mainAccount.maskedPan && mainAccount.maskedPan.length > 0) {
          mainAccountInfo += ` (${mainAccount.maskedPan[0]})`;
        }
      }
    }

    const info = data.accounts
      .map((acc, index) => {
        const balance = (acc.balance / 100).toFixed(2);
        const currency =
          acc.currencyCode === 980 ? "–≥—Ä–Ω" : `–∫–æ–¥ –≤–∞–ª—é—Ç–∏ ${acc.currencyCode}`;
        const isMain = acc.id === user.main_account_id ? " [–û–°–ù–û–í–ù–ò–ô]" : "";
        const cardNumber =
          acc.maskedPan && acc.maskedPan.length > 0
            ? ` (${acc.maskedPan[0]})`
            : "";
        return `${
          index + 1
        }. –ë–∞–ª–∞–Ω—Å: ${balance} ${currency}${cardNumber}${isMain}`;
      })
      .join("\n");

    return ctx.reply(`üë§ –Ü–º'—è: ${name}${mainAccountInfo}\n\n–†–∞—Ö—É–Ω–∫–∏:\n${info}`);
  } catch (err) {
    console.error(err);
    return ctx.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.");
  }
});

// üöÄ Express-—Å–µ—Ä–≤–µ—Ä
const app = express();
app.use(bodyParser.json());

app.get("/", (_, res) => res.send("‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!"));

const PORT = process.env["PORT"] || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:${PORT}`);
});

// ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞

bot.telegram.setMyCommands(commands);

bot
  .launch()
  .then(() => {
    console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!");
  })
  .catch((err) => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:", err);
  });
