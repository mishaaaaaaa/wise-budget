import dotenv from "dotenv";
import express from "express";
import { Telegraf } from "telegraf";
import bodyParser from "body-parser";
import fetch from "node-fetch";
// import { getXataClient } from "./xata.js";
import { xataClient } from "./xataClient.js";
import { MonobankClientInfo } from "./types.js";

// ‚úÖ XataClient wrapper implemented

dotenv.config();

const botToken = process.env["BOT_TOKEN"];
if (!botToken) throw new Error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env —Ñ–∞–π–ª–µ!");

const bot = new Telegraf(botToken);

// üìå /start
bot.start((ctx) => {
  ctx.reply(
    "–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—é –±—é–¥–∂–µ—Ç—É Monobank. –í–≤–µ–¥–∏ /connect, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏."
  );
});

// üìå /connect
bot.command("connect", async (ctx) => {
  await ctx.reply(
    "–í–≤–µ–¥–∏, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–≤—ñ–π —Ç–æ–∫–µ–Ω Monobank: https://api.monobank.ua/"
  );
});

// üìå /me ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ Monobank
bot.command("me", async (ctx) => {
  const userId = ctx.from.id;
  const client = xataClient();

  const user = await client.getUserByTelegramId(userId);

  if (!user) {
    return ctx.reply("‚ùó –°–ø–µ—Ä—à—É –ø—ñ–¥–∫–ª—é—á–∏ —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ /connect");
  }

  const token = user.monobank_token;

  try {
    const response = await fetch(
      "https://api.monobank.ua/personal/client-info",
      {
        headers: { "X-Token": token },
      }
    );

    if (!response.ok) {
      return ctx.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞.");
    }

    const data = (await response.json()) as MonobankClientInfo;
    const name = data.name || user.monobank_name || "–ö–ª—ñ—î–Ω—Ç";
    const info = data.accounts
      .map((acc) => {
        const balance = (acc.balance / 100).toFixed(2);
        const currency = acc.currencyCode;
        return `‚Ä¢ –ë–∞–ª–∞–Ω—Å: ${balance} (–≤–∞–ª—é—Ç–∞ ${currency})`;
      })
      .join("\n");

    return ctx.reply(`üë§ –Ü–º'—è: ${name}\n${info}`);
  } catch (err) {
    console.error(err);
    return ctx.reply("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.");
  }
});

// üì© –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–∫–µ–Ω)
bot.on("text", async (ctx) => {
  const token = ctx.message.text.trim();

  try {
    const response = await fetch(
      "https://api.monobank.ua/personal/client-info",
      {
        headers: { "X-Token": token },
      }
    );

    if (!response.ok) throw new Error("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ç–æ–∫–µ–Ω");

    const data = (await response.json()) as MonobankClientInfo;
    const name = data.name || "–ö–ª—ñ—î–Ω—Ç";

    await ctx.reply(`‚úÖ –í—ñ—Ç–∞—é, ${name}! –¢–æ–∫–µ–Ω –¥—ñ–π—Å–Ω–∏–π.`);

    // Using the new XataClient wrapper with proper type handling
    const client = xataClient();
    await client.saveOrUpdateUser({
      telegramId: ctx.from.id,
      username: ctx.from.username || "",
      firstName: ctx.from.first_name || "",
      lastName: ctx.from.last_name || "",
      languageCode: ctx.from.language_code || "",
      isPremium: ctx.from.is_premium === true,
      monobankToken: token,
      monobankName: name,
    });
  } catch (error) {
    console.error(error);
    await ctx.reply("‚ùå –ü–æ–º–∏–ª–∫–∞! –¢–æ–∫–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∞–±–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.");
  }
});

// üöÄ Express-—Å–µ—Ä–≤–µ—Ä
const app = express();
app.use(bodyParser.json());

app.get("/", (_, res) => res.send("‚úÖ –°–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î!"));

const PORT = process.env["PORT"] || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Express —Å–µ—Ä–≤–µ—Ä –ø—Ä–∞—Ü—é—î –Ω–∞ http://localhost:${PORT}`);
});

// ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot
  .launch()
  .then(() => {
    console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π!");
  })
  .catch((err) => {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:", err);
  });
